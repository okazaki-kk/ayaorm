package ayaorm

import (
	"os"
	"text/template"
)

func Generate(modelName string, field map[string]string) {
	textBody := `
		{{define "Base"}}
		// Code generated by ayaorm. DO NOT EDIT.
		package main

		import (
			"fmt"
			"github.com/okazaki-kk/ayaorm"
		)

		type UserRelation struct {
			model *{{.modelName}}
			*ayaorm.Relation
		}

		func (m *{{.modelName}}) newRelation() *UserRelation {
			r := &UserRelation{
				m,
				ayaorm.NewRelation(db).SetTable("users"),
			}
			r.Select(
				"id",
				"name",
				"age",
			)

			return r
		}

		func (m {{.modelName}}) Select(columns ...string) *UserRelation {
			return m.newRelation().Select(columns...)
		}

		func (r *UserRelation) Select(columns ...string) *UserRelation {
			cs := []string{}
			for _, c := range columns {
				if r.model.isColumnName(c) {
					cs = append(cs, fmt.Sprintf("users.%s", c))
				} else {
					cs = append(cs, c)
				}
			}
			r.Relation.SetColumns(cs...)
			return r
		}

		type UserParams {{.modelName}}

		func (m {{.modelName}}) Build(p UserParams) *{{.modelName}} {
			return &{{.modelName}}{
				Id:   p.Id,
				Name: p.Name,
				Age:  p.Age,
			}
		}

		func (r *UserRelation) QueryRow() (*{{.modelName}}, error) {
			row := &{{.modelName}}{}
			fmt.Println(r.Relation.GetColumns())
			err := r.Relation.QueryRow(row.fieldPtrsByName(r.Relation.GetColumns())...)
			if err != nil {
				return nil, err
			}
			return row, nil
		}

		func (m {{.modelName}}) Count(column ...string) int {
			return m.newRelation().Count(column...)
		}

		func (m {{.modelName}}) All() *UserRelation {
			return m.newRelation()
		}

		func (m {{.modelName}}) Limit(limit int) *UserRelation {
			return m.newRelation().Limit(limit)
		}

		func (r *UserRelation) Limit(limit int) *UserRelation {
			r.Relation.Limit(limit)
			return r
		}

		func (m {{.modelName}}) Order(key, order string) *UserRelation {
			return m.newRelation().Order(key, order)
		}

		func (r *UserRelation) Order(key, order string) *UserRelation {
			r.Relation.Order(key, order)
			return r
		}

		func (m {{.modelName}}) Where(column string, value interface{}) *UserRelation {
			return m.newRelation().Where(column, value)
		}

		func (r *UserRelation) Where(column string, value interface{}) *UserRelation {
			r.Relation.Where(column, value)
			return r
		}

		func (m {{.modelName}}) Save() error {
			return m.newRelation().Save()
		}

		func (r *UserRelation) Save() error {
			fieldMap := make(map[string]interface{})
			for _, c := range r.Relation.GetColumns() {
				switch c {
				case "id", "users.id":
					fieldMap["id"] = r.model.Id
				case "name", "users.name":
					fieldMap["name"] = r.model.Name
				case "age", "users.age":
					fieldMap["age"] = r.model.Age
				}
			}

			return r.Relation.Save(fieldMap)
		}

		func (m *{{.modelName}}) fieldPtrByName(name string) interface{} {
			switch name {
			case "id", "users.id":
				return &m.Id
			case "name", "users.name":
				return &m.Name
			case "age", "users.age":
				return &m.Age
			default:
				return nil
			}
		}

		func (m *{{.modelName}}) fieldPtrsByName(names []string) []interface{} {
			fields := []interface{}{}
			for _, n := range names {
				f := m.fieldPtrByName(n)
				fields = append(fields, f)
				fmt.Println(&f)
			}
			return fields
		}

		func (m *{{.modelName}}) isColumnName(name string) bool {
			for _, c := range m.columnNames() {
				if c == name {
					return true
				}
			}
			return false
		}

		func (m *{{.modelName}}) columnNames() []string {
			return []string{
				"id",
				"name",
				"age",
			}
		}
		{{end}}
	`

	t, _ := template.New("Base").Parse(textBody)
	f, _ := os.Create("./main_gen.go")
	defer f.Close()
	params := make(map[string]string)
	params["modelName"] = modelName
	t.Execute(f, params)
}
